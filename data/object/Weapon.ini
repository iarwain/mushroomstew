; MushroomStew - Weapons config file
; Should be used with orx v.1.0+

; Object
[MushroomFireBallLauncher]
Spawner = MFBLSpawner

[MushroomLightningBallLauncher]
Spawner = MLBLSpawner

[MushroomMissileLauncher]
Spawner = MMLSpawner

[MushroomGun]
Spawner = MGSpawner

[TimeGravityWeapon]
Graphic           = DummyGraphic
Body              = SpecialWeaponBody
Position          = (0.0, 0.0, -0.00001)
WeaponShaderList  = TimeShader # GravityShader
ChargeShaderList  = TimeChargeShader # GravityChargeShader
TimeClock         = SlowDownClock
GravityStrength   = 7000
OnSound           = SpecialWeaponOnSound
OffSound          = SpecialWeaponOffSound
Duration          = 10.0
RefillRate        = 0.1

; Clock
[SlowDownClock]
ModifierType  = multiply
ModifierValue = 0.1

; Spawner
[WeaponSpawner]
WaveSize          = 1
WaveDelay         = 0.0
AutoReset         = true
TotalObject       = 1
UseRelativeSpeed  = true
UseScale          = false

[MFBLSpawner@WeaponSpawner]
Object            = MiniFireBall
Position          = (15, 5, 0)

[MLBLSpawner@WeaponSpawner]
Object            = MiniLightningBall
Position          = (15, 5, 0)

[MMLSpawner@WeaponSpawner]
Object            = HomingMissile
Position          = (15, 5, 0)

[MGSpawner@WeaponSpawner]
Object            = Bullet
Position          = (12, 7, 0)

; Body
[SpecialWeaponBody]
PartList      = SWSphere
HighSpeed     = true
Dynamic       = true
CustomGravity = (0.0, 0.0, 0.0)

[SWSphere]
Type        = sphere
SelfFlags   = 0x0008 ; Special weapon type
CheckMask   = 0x00F4 ; Collides with missiles & character senses
Center      = (0.0, 0.0, 0.0)
Radius      = 200.0
Solid       = false
Density     = 1.0

; FX

[ShrinkFX]
SlotList    = ShrinkSlot
KeepInCache = true

[ShrinkSlot]
Type        = scale
StartTime   = 0.0
EndTime     = 0.0
Curve       = linear
StartValue  = 1.0
EndValue    = 0.001

[EnlargeFX]
SlotList    = EnlargeSlot
KeepInCache = true

[EnlargeSlot@ShrinkSlot]
EndTime  = 0.5
EndValue = 1000.0

; Shader
[TimeShader]
Code = "
void main()
{
  // Gets current pixel
  vec3 vPixel = texture2D(Texture, gl_TexCoord[0].xy).xyz;

  // Gets screen size vector
  vec2 vSize = vec2(ScreenWidth, ScreenHeight);
  
  // Gets target vector
  vec2 vTarget = vec2(ObjectPos.x - CameraPos.x, CameraPos.y - ObjectPos.y);

  // Gets distance vector
  vec2 vDist = vTarget - ((gl_TexCoord[0].xy - vec2(0.5, 0.5)) * vSize);

  // Gets square distance & radius
  float fSqrDist    = dot(vDist, vDist);
  float fSqrRadius  = (Radius * ObjectScale.x) * (Radius * ObjectScale.y);

  // Is inside radius?
  if(fSqrDist < fSqrRadius)
  {
    vec3 vBW;

    // Gets ratio
    float fRatio = 1.0 - fSqrDist / fSqrRadius;

    // Gets pixel intensity
    float fIntensity = 0.333 * (vPixel.r + vPixel.g + vPixel.b);

    // Out of threshold?
    if(fIntensity <= Threshold)
    {
      // Gets Black pixel
      vBW = vec3(0.0, 0.0, 0.0);
    }
    else
    {
      // Gets White pixel
      vBW = vec3(1.0, 1.0, 1.0);
    }

    // Outputs modified pixel on top of the original one
    gl_FragColor =  vec4(mix(vPixel, vBW, fRatio), 1.0);
  }
  else
  {
    // Keeps original pixel
    gl_FragColor = vec4(vPixel, 1.0);
  }
}
"
KeepInCache     = true
UseCustomParam  = true
ParamList       = Texture # ObjectPos # CameraPos # Radius # ObjectScale # ScreenWidth # ScreenHeight # Threshold
Texture         = screen
Radius          = @SWSphere
ObjectScale     = (1.0, 1.0, 1.0)
CameraPos       = (0.0, 0.0, 0.0)
ObjectPos       = (0.0, 0.0, 0.0)
ScreenWidth     = @Display
ScreenHeight    = @Display
Threshold       = 0.36

[GravityShader@TimeShader]
Code = "
void main()
{
  // Gets current pixel
  vec3 vPixel = texture2D(Texture, gl_TexCoord[0].xy).xyz;

  // Gets screen size vector
  vec2 vSize = vec2(ScreenWidth, ScreenHeight);
  
  // Gets target vector
  vec2 vTarget = vec2(ObjectPos.x - CameraPos.x, CameraPos.y - ObjectPos.y);

  // Gets distance vector
  vec2 vDist = vTarget - ((gl_TexCoord[0].xy - vec2(0.5, 0.5)) * vSize);

  // Gets square distance & radius
  float fSqrDist    = dot(vDist, vDist);
  float fSqrRadius  = (Radius * ObjectScale.x) * (Radius * ObjectScale.y);

  // Is inside radius?
  if(fSqrDist < fSqrRadius)
  {
    vec3 vEmboss;

    // Gets ratio
    float fRatio = 1.0 - fSqrDist / fSqrRadius;

    vEmboss = vec3(0.5, 0.5, 0.5) * vPixel - (vec3(2.0, 2.0, 2.0) * texture2D(Texture, gl_TexCoord[0].xy - vec2(0.001, 0.001)).xyz) + (vec3(2.0, 2.0, 2.0) * texture2D(Texture, gl_TexCoord[0].xy + vec2(0.001, 0.001)).xyz);

    // Outputs modified pixel on top of the original one
    gl_FragColor =  vec4(mix(vPixel, vEmboss, fRatio), 1.0);
  }
  else
  {
    // Keeps original pixel
    gl_FragColor = vec4(vPixel, 1.0);
  }
}
"
ParamList = Texture # ObjectPos # CameraPos # Radius # ObjectScale # ScreenWidth # ScreenHeight

[TimeChargeShader]
Code = "
float rand(vec2 v)
{
  return(fract(sin(dot(v, vec2(12.9898, 78.233))) * 43758.5453));
}

void main()
{
  // Gets current pixel
  vec3 vPixel = texture2D(Texture, gl_TexCoord[0].xy).xyz;

  // Is inside bar?
  if((abs(gl_TexCoord[0].x - Position.x) <= (Size.x * SpecialWeaponCharge)) && (abs(gl_TexCoord[0].y - Position.y) <= Size.y))
  {
    vec3 vOutput;

    // Gets ratio
    vec2 vDist = gl_TexCoord[0].xy - Position.xy;
    float fRatio = (1.0 - dot(vDist, vDist) / (Size.x * Size.x)) * (0.8 + 0.2 * rand(gl_TexCoord[0].xy + vec2(Time)));

    // Gets pixel intensity
    float fIntensity = 0.333 * (vPixel.r + vPixel.g + vPixel.b);

    // Out of threshold?
    if(fIntensity <= Threshold)
    {
      // Gets dark pixel
      vOutput = vec3(0.2 + 0.4 * rand(gl_TexCoord[0].xy + vec2(Time))) * Color;
    }
    else
    {
      // Gets colored pixel
      vOutput = Color;
    }

    // Outputs modified pixel on top of the original one
    gl_FragColor =  vec4(mix(vPixel, vOutput, fRatio), 1.0);
  }
  else
  {
    // Keeps original pixel
    gl_FragColor = vec4(vPixel, 1.0);
  }
}
"
KeepInCache         = true
UseCustomParam      = true
ParamList           = Texture # Position # Size # SpecialWeaponCharge # Threshold # Time # Color
Texture             = screen
Position            = (0.5, 0.95, 0.0)
Size                = (0.1, 0.02, 0.0)
SpecialWeaponCharge = 1.0
Threshold           = 0.36
Time                = 0.0
Color               = (1.0, 0.5, 0.0)

[GravityChargeShader@TimeChargeShader]
Color               = (1.0, 0.0, 1.0)
