; MushroomStew - Texts config file
; Should be used with orx v.1.0+

; Locale
[Locale]
LanguageList = English

[English]
Continue      = Press <%s> to continue.
NewGame       = Press <%s> to start a new game.
Challenge     = Press <%s> to play the challenge levels.
Summary       = %s
Score         = Score: %d
EndLevelBonus = "
Time bonus:          %d
Health bonus:        %d%s
SpecialWeapon bonus: %d"
Pause         = "                    GAME IS PAUSED


Press <%s> to resume or <%s> to quit.



Controls:


Left:                  <%s>
Right:                 <%s>
Jump/Double jump:      <%s>
Crouch:                <%s>
Attack:                <%s>
Fire SpecialWeapon©:   <%s>
Switch SpecialWeapon©: <%s>


Mushrooms get hurt when falling from too high.
Staying crouched can be used to fake death and dodge bullets.
Missiles can't be dodged by crouching.
Red mushrooms are not affected by the SpecialWeapon©.
When you have the SpecialWeapon©, its gauge is diplayed on top:
- Orange for time mode
- Purple for gravity mode
"

; Object
[LoadMap]
Graphic         = LoadMapGraphic
LifeTime        = 4.0
Position        = (0.0, -0.45, 0.001)
Color           = (10, 10, 255)
ParentCamera    = MainCamera
FXList          = LoadMapFX

[Title]
Position        = (0.0, 0.0, 0.001)
Scale           = (0.009, 0.009, 1.0)
ParentCamera    = MainCamera
ChildList       = M # u # s # h # r # o1 # o2 # m # S # t # e # w # TitleFX # Continue # NewGame # Challenge
SoundList       = TitleMusic

[TitleFX]
Graphic         = DummyGraphic
Position        = (0.0, 0.0, 0.001)
ShaderList      = TitleShader

[EndLevel]
Graphic         = DummyGraphic
Position        = (0.0, 0.0, 0.001)
Scale           = (0.009, 0.009, 1.0)
ParentCamera    = MainCamera
ChildList       = BlackLayer # Summary # EndLevelBonus # Continue
SoundList       = TitleMusic

[BlackLayer@BlackPixel]
Graphic         = CenterPixelGraphic
Position        = (0, 0, 0.001)
Color           = (0, 0, 0)
Alpha           = 0.8
Scale           = (1250, 1250 , 0)

[M]
Graphic   = MGraphic
Color     = (255, 255, 255)
Position  = (-48, 0, 0.001)

[u]
Graphic   = uGraphic
Color     = (255, 255, 255)
Position  = (-40, 0, 0.001)

[s]
Graphic   = sGraphic
Color     = (255, 255, 255)
Position  = (-32, 0, 0.001)

[h]
Graphic   = hGraphic
Color     = (255, 255, 255)
Position  = (-24, 0, 0.001)

[r]
Graphic   = rGraphic
Color     = (255, 255, 255)
Position  = (-16, 0, 0.001)

[o1]
Graphic   = MSBlueGraphic
Color     = (255, 255, 255)
Scale     = (0.2, 0.2, 0.0)
Position  = (-8, 0, 0.001)

[o2@o1]
Position  = (0, 0, 0.001)

[m]
Graphic   = mGraphic
Color     = (255, 255, 255)
Position  = (8, 0, 0.001)

[S]
Graphic   = SGraphic
Color     = (255, 255, 255)
Position  = (24, 0, 0.001)

[t]
Graphic   = tGraphic
Color     = (255, 255, 255)
Position  = (32, 0, 0.001)

[e]
Graphic   = eGraphic
Color     = (255, 255, 255)
Position  = (40, 0, 0.001)

[w]
Graphic   = wGraphic
Color     = (255, 255, 255)
Position  = (48, 0, 0.001)

[Score]
Graphic         = SCGraphic
Color           = (50, 50, 250)
Alpha           = 1.0
Position        = (-0.48, -0.48, 0.001)
ParentCamera    = MainCamera

[Summary]
Graphic   = SMGraphic
Color     = (150, 150, 150)
Alpha     = 1.0
Position  = (0, -50, 0)
Scale     = (0.1085, 0.1447, 1.0)

[EndLevelBonus]
Graphic   = ELBGraphic
Color     = (150, 150, 150)
Alpha     = 1.0
Position  = (0, 0, 0)
Scale     = (0.1085, 0.1447, 1.0)

[Continue]
Graphic   = CTGraphic
Color     = (00, 250, 0)
Alpha     = 0.0
Position  = (0, 30, 0)
FXList    = PFFX # DelayedFadeInFX
Scale     = (0.1085, 0.1447, 1.0)

[NewGame@Continue]
Graphic   = NGGraphic
Color     = (150, 150, 150)
Position  = (0, 35, 0)

[Challenge@NewGame]
Graphic   = CHGraphic
Position  = (0, 40, 0)

[Pause]
Graphic         = PSGraphic
Position        = (0.0, 0.0, 0.001)
ParentCamera    = MainCamera
ChildList       = BlackLayer
FXList          = PauseFX

; Graphic
[DummyGraphic]
Text = DummyText

[DummyText]

[TitleTexture]
Texture     = ../../data/font/pgil_font_8x8.png
TextureSize = (8, 8, 0)
Pivot       = center

[LoadMapText]

[LoadMapGraphic]
Pivot = center
Text  = LoadMapText

[TitleGraphic]
Text  = TitleText
Pivot = center

[TitleText]
String  = Project X

[eGraphic@TitleTexture]
TextureCorner = (544, 0, 0)

[hGraphic@TitleTexture]
TextureCorner = (568, 0, 0)

[mGraphic@TitleTexture]
TextureCorner = (608, 0, 0)

[MGraphic@TitleTexture]
TextureCorner = (352, 0, 0)

[rGraphic@TitleTexture]
TextureCorner = (648, 0, 0)

[sGraphic@TitleTexture]
TextureCorner = (656, 0, 0)

[SGraphic@TitleTexture]
TextureCorner = (400, 0, 0)

[uGraphic@TitleTexture]
TextureCorner = (672, 0, 0)

[tGraphic@TitleTexture]
TextureCorner = (664, 0, 0)

[wGraphic@TitleTexture]
TextureCorner = (688, 0, 0)

[SCGraphic]
Text  = SCText
Pivot = top left

[SMGraphic]
Text  = SMText
Pivot = top center

[ELBGraphic]
Text  = ELBText
Pivot = top center

[CTGraphic]
Text  = CTText
Pivot = center

[NGGraphic]
Text  = NGText
Pivot = center

[CHGraphic]
Text  = CHText
Pivot = center

[PSGraphic]
Text  = PSText
Pivot = center

[SCText@LoadMapText]
String = $Score

[SMText@LoadMapText]
String = $Summary

[ELBText@LoadMapText]
String = $EndLevelBonus

[CTText@LoadMapText]
String = $Continue

[NGText@LoadMapText]
String = $NewGame

[CHText@LoadMapText]
String = $Challenge

[PSText@LoadMapText]
String = $Pause

; FX
[LoadMapFX]
SlotList    = FadeInOut
KeepInCache = true

[FadeInOut]
Type        = alpha
StartTime   = 0.0
EndTime     = @LoadMap.LifeTime
Curve       = sine
StartValue  = -1.0
EndValue    = 0.0

[DelayedFadeInFX]
SlotList = InstantHide # DelayedFadeIn

[InstantHide]
Type        = alpha
StartTime   = 0.0
EndTime     = 0.0
Curve       = linear
StartValue  = 0.0
EndValue    = -1.0

[DelayedFadeIn]
Type        = alpha
StartTime   = 2.0
EndTime     = 3.0
Curve       = linear
StartValue  = 0.0
EndValue    = 1.0

[PFFX]
SlotList  = Blink
Loop      = true

[Blink]
Type        = alpha
StartTime   = 0.0
EndTime     = 3.0
Curve       = sine
StartValue  = 0.0
EndValue    = 1.0

[PauseFX]
SlotList  = ColorBlend1 # ColorBlend2 # ColorBlend3
Loop      = true

[ColorBlend1]
Type        = color
Curve       = linear
StartTime   = 0.0
EndTime     = 2.0
Absolute    = true
StartValue  = (255, 0, 0)
EndValue    = (0, 255, 0)

[ColorBlend2@ColorBlend1]
StartTime   = @ColorBlend1.EndTime
EndTime     = 4.0
StartValue  = @ColorBlend1.EndValue
EndValue    = (0, 255, 255)

[ColorBlend3@ColorBlend1]
StartTime   = @ColorBlend2.EndTime
EndTime     = 6.0
StartValue  = @ColorBlend2.EndValue
EndValue    = @ColorBlend1.StartValue

; Shader
[TitleShader]
Code = "

vec2 GetLightPos()
{
  return(vec2(0.5 + LightRadius * sin(0.25 * Time + 3.14), 0.5 + LightRadius * sin(0.75 * Time + 3.14)));
}

float rand(vec2 v)
{
  return(fract(sin(dot(v, vec2(12.9898, 78.233))) * 43758.5453));
}

float GetLightIntensity(vec2 vPos, vec2 vLightPos)
{
  // Gets distance vector in screen space
  vec2 vDist = vPos - vLightPos;
  vDist.x *= ScreenWidth / ScreenHeight;

  // Returns spot light value
  return(clamp(1.0 - (1.0 / (LightRadius * LightRadius)) * dot(vDist, vDist), AmbientLight, 1.0));
}

bool IsInShadow(vec2 vPos, vec2 vLightPos)
{
  float fTest = 0.0;

  // Gets target vector
  vec2 vTarget = vPos - vLightPos;

  // Gets distance vector
  vec2 vDist = vTarget;
  vDist.x *= ScreenWidth / ScreenHeight;

  // Not too far?
  if(dot(vDist, vDist) <= (LightRadius * LightRadius))
  {
    float fFactor, fAcc, fAccInit, fInc, fSampling, fShift;

    // Gets sampling
    fSampling = 1.0;

    // Gets increment vector
    vec2 vInc = normalize(vTarget);

    // Gets slope factor
    if(abs(vInc.x) >= abs(vInc.y))
    {
      fFactor = ShadowSpacing / (ScreenWidth * abs(vInc.x));
    }
    else
    {
      fFactor = ShadowSpacing / (ScreenHeight * abs(vInc.y));
    }

    // Applies it
    vInc *= vec2(fFactor, fFactor);

    // Gets spacing inc
    vec2 vSpacingInc = vInc * vec2(fSampling, fSampling);

    // Gets initial accumulator
    if(vTarget.x != 0.0)
    {
      fAccInit  = abs(vTarget.x);
      fInc      = abs(vSpacingInc.x);
      fShift    = abs(vInc.x);
    }
    else
    {
      fAccInit  = abs(vTarget.y);
      fInc      = abs(vSpacingInc.y);
      fShift    = abs(vInc.y);
    }

    // For all spacings
    for(float f = fSampling; f > 0.0; f -= 1.0)
    {
      // Gets accumulator
      fAcc = fAccInit - f * fShift;

      // For all pixels to test on ray
      for(vec2 vTestPos = vLightPos + vInc * vec2(f, f); fAcc >= 0.0; vTestPos += vSpacingInc, fAcc -= fInc)
      {
        // Gets pixel
        vec3 v = texture2D(Texture, vTestPos).rgb;

        // Gets test value
        fTest += v.r + v.g + v.b;
      }
    }
  }

  // Done!
  return (fTest != 0.0) ? true : false;
}

void main()
{
  // Gets pixel
  vec3 vPixel = texture2D(Texture, gl_TexCoord[0].xy).rgb;

  // Inside text?
  if(vPixel != vec3(0.0))
  {
    // Gets intensity
    float fIntensity = GetLightIntensity(gl_TexCoord[0].xy, GetLightPos());

    // Gets textured pixel
    vec3 vColor = vec3((0.5 + 0.5 * rand(gl_TexCoord[0].xy + vec2(0.000001 * Time))) * fIntensity) * texture2D(Overlay, vec2(gl_TexCoord[0].x, (gl_TexCoord[0].y - 0.5) * 4.0 + sin(0.12 * min(Time, 0.7 / 0.12)) * 0.8)).rgb;

    // Sets pixel
    gl_FragColor = vec4(vColor, 1.0);
  }
  else
  {
    float fIntensity;

    // In shadow?
    if(IsInShadow(gl_TexCoord[0].xy, GetLightPos()))
    {
      // Unlit pixel
      fIntensity = AmbientLight;
    }
    else
    {
      // Lit pixel
      fIntensity = GetLightIntensity(gl_TexCoord[0].xy, GetLightPos());
    }

    // Sets pixel
    gl_FragColor = vec4(vec3((0.6 + 0.4 * rand(gl_TexCoord[0].xy + vec2(fIntensity))) * fIntensity * texture2D(Background, vec2(gl_TexCoord[0].x, gl_TexCoord[0].y))), 1.0);
  }
}
"
ParamList         = Texture # Overlay # Background # Time # ScreenWidth # ScreenHeight # LightRadius # AmbientLight # ShadowSpacing
Texture           = screen
Overlay           = ../../data/scenery/4047530942_f703682c89_o.png
Background        = ../../data/scenery/4046787259_15cbc9d082_o.png
Time              = 0.0
ScreenWidth       = @Display
ScreenHeight      = @Display
LightRadius       = 0.7
AmbientLight      = 0.2
ShadowSpacing     = 1.0
